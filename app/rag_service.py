from app.db import db
from datetime import datetime
import re, unicodedata
from ollama import AsyncClient
from bson import ObjectId

# ‚úÖ collections
qa_collection = db["qa_pairs"]
files_collection = db["files_collection"]  # ‡πÄ‡∏û‡∏¥‡πà‡∏° collection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå

# ===== Normalize =====
def normalize(text: str) -> str:
    text = unicodedata.normalize("NFKC", text.lower().strip())
    text = re.sub(r"[^\u0E00-\u0E7Fa-zA-Z0-9 ]+", " ", text)
    text = re.sub(r"\s+", " ", text)
    return text.strip()

# ===== ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πä‡∏∞ =====
def get_exact_answer(question: str):
    norm_q = normalize(question)
    found = qa_collection.find_one({"normalized": norm_q})
    if found:
        print(f"‚ôª ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å MongoDB ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {found['question']}")
        return found["answer"]
    return None

# ===== ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Q&A =====
def save_to_mongo(question: str, answer: str, username: str = "guest", chat_id: str | None = None):
    if not question or not answer:
        print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö)")
        return

    norm_q = normalize(question)
    qa_collection.insert_one({
        "username": username,
        "chat_id": chat_id,
        "question": question,
        "normalized": norm_q,
        "answer": answer,
        "timestamp": datetime.utcnow()
    })
    print(f"üíæ [save_to_mongo] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà: '{question}' (chat_id={chat_id})")

    # üßπ ‡∏à‡∏≥‡∏Å‡∏±‡∏î 5 record ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    duplicates = list(qa_collection.find({"normalized": norm_q}).sort("timestamp", -1))
    if len(duplicates) > 5:
        old_ids = [d["_id"] for d in duplicates[5:]]
        qa_collection.delete_many({"_id": {"$in": old_ids}})
        print(f"üßπ ‡∏•‡∏ö record ‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á '{question}' ‡∏≠‡∏≠‡∏Å {len(old_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Ask Bot (Streaming ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏ä‡∏ó‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå) =====
async def ask_bot_stream(question: str, username: str = "guest", chat_id: str | None = None):
    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô MongoDB ‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡∏≠‡∏ö‡∏ã‡πâ‡∏≥)
    existing_answer = get_exact_answer(question)
    if existing_answer:
        # üîÅ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å MongoDB ‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö streaming
        for token in existing_answer:
            yield token
        return  # ‚ùó ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM ‡∏ï‡πà‡∏≠

    client = AsyncClient()

    # üß† ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏≠‡∏±‡∏ô
    context_messages = []
    if chat_id:
        history = list(
            qa_collection.find({"chat_id": chat_id})
            .sort("timestamp", -1)
            .limit(5)
        )
        for h in reversed(history):
            context_messages.append({"role": "user", "content": h["question"]})
            context_messages.append({"role": "assistant", "content": h["answer"]})

    # üìÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    doc_context = ""
    if chat_id:
        docs = list(files_collection.find({
            "$or": [
                {"chat_id": chat_id},
                {"is_global": True}  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏≤‡∏ß‡∏£ (global knowledge)
            ]
        }))
        if docs:
            print(f"üìé ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {len(docs)} ‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏ß‡∏° global) ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á {chat_id}")
            for doc in docs:
                doc_context += f"\n\n[‡πÑ‡∏ü‡∏•‡πå: {doc['filename']}]\n{doc['content'][:1500]}"

    # üîπ ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    question_with_context = (
        f"‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n{doc_context}\n\n‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}"
        if doc_context.strip()
        else question
    )

    context_messages.append({"role": "user", "content": question_with_context})

    # üöÄ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    stream = await client.chat(
        model="mistral",
        messages=context_messages,
        stream=True
    )

    full_answer = ""
    try:
        async for chunk in stream:
            if "message" in chunk and "content" in chunk["message"]:
                token = chunk["message"]["content"]
                full_answer += token
                yield token
    except Exception as e:
        print(f"üü• Stream interrupted: {e}")
        return

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°-‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö
    if full_answer.strip():
        save_to_mongo(question, full_answer, username, chat_id)
        print(f"‚úÖ Saved contextual Q&A (chat_id={chat_id})")
