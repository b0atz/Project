from fastapi import FastAPI, Depends, HTTPException, UploadFile, File, Body
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse, JSONResponse
from datetime import datetime
from bson import ObjectId
import os

from app.models import ChatIn
from app.rag_service import ask_bot_stream, save_to_mongo
from app.auth import get_current_user, router as auth_router
from app.db import db

qa_collection = db["qa_pairs"]
chats_collection = db["chats_collection"]

app = FastAPI(title="ConfigMate API", version="3.8.0")

# ===== CORS =====
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth_router, prefix="/auth", tags=["auth"])

# ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ----------
@app.post("/chat/new", tags=["chat"])
def create_chat(username: str = Depends(get_current_user)):
    new_chat = {
        "username": username,
        "title": "‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà",
        "created_at": datetime.utcnow()
    }
    result = chats_collection.insert_one(new_chat)
    return {"chat": str(result.inserted_id)}

# ---------- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á ----------
@app.get("/chat/list", tags=["chat"])
def list_chats(username: str = Depends(get_current_user)):
    chats = list(chats_collection.find({"username": username}, {"_id": 1, "title": 1}))
    return {"chats": [{"_id": str(c["_id"]), "title": c.get("title", "‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà")} for c in chats]}

# ---------- ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó ----------
@app.get("/chat/history/{chat_id}", tags=["chat"])
def chat_history(chat_id: str, username: str = Depends(get_current_user)):
    history = list(
        qa_collection.find({"chat_id": chat_id}, {"_id": 0, "question": 1, "answer": 1})
        .sort("timestamp", 1)
    )
    return {"history": history}

# ---------- ‡πÅ‡∏ä‡∏ó (Streaming + Save ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö) ----------
@app.post("/chat", tags=["chat"])
async def chat(inp: ChatIn, username: str = Depends(get_current_user)):
    from app.rag_service import save_to_mongo, ask_bot_stream
    import asyncio

    if not inp.chat_id:
        raise HTTPException(status_code=400, detail="Missing chat_id")

    full_answer = ""
    stopped = False  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î

    async def generate():
        nonlocal full_answer, stopped
        try:
            async for token in ask_bot_stream(inp.question, username, inp.chat_id):
                full_answer += token
                yield token
        except asyncio.CancelledError:
            stopped = True
            print("‚õî Stream stopped by user (AbortController)")
            raise  # ‡∏ï‡πâ‡∏≠‡∏á raise ‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ StreamingResponse ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏£‡∏¥‡∏á

    async def on_stream_complete():
        if not stopped and full_answer.strip():
            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á
            save_to_mongo(inp.question, full_answer, username, inp.chat_id)
            print(f"üíæ [main] Saved after stream | chat_id={inp.chat_id}")
        else:
            print(f"üö´ Skip save (user stopped or empty answer)")

    response = StreamingResponse(generate(), media_type="text/plain")
    response.background = on_stream_complete
    return response

# ---------- ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó + ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô ----------
@app.delete("/chat/delete/{chat_id}", tags=["chat"])
def delete_chat(chat_id: str, username: str = Depends(get_current_user)):
    from app.db import qa_collection, files_collection  # ‚úÖ import ‡πÄ‡∏û‡∏¥‡πà‡∏°

    # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    chat = chats_collection.find_one({"_id": ObjectId(chat_id), "username": username})
    if not chat:
        raise HTTPException(status_code=404, detail="Chat not found")

    # üßπ ‡∏•‡∏ö Q&A ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
    qa_deleted = qa_collection.delete_many({"chat_id": chat_id})
    # üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
    files_deleted = files_collection.delete_many({"chat_id": chat_id})
    # üßπ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏≠‡∏≠‡∏Å
    chat_deleted = chats_collection.delete_one({"_id": ObjectId(chat_id)})

    print(f"üóëÔ∏è Deleted chat {chat_id}: {qa_deleted.deleted_count} QA | {files_deleted.deleted_count} files")

    return {
        "msg": "Chat and related data deleted successfully",
        "deleted_qas": qa_deleted.deleted_count,
        "deleted_files": files_deleted.deleted_count,
        "deleted_chat": chat_deleted.deleted_count
    }

# ---------- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á ----------
from pydantic import BaseModel

class RenameChatIn(BaseModel):
    title: str

@app.put("/chat/rename/{chat_id}", tags=["chat"])
def rename_chat(chat_id: str, data: RenameChatIn, username: str = Depends(get_current_user)):
    result = chats_collection.update_one(
        {"_id": ObjectId(chat_id), "username": username},
        {"$set": {"title": data.title}}
    )
    if result.matched_count == 0:
        raise HTTPException(status_code=404, detail="Chat not found")

    chat = chats_collection.find_one({"_id": ObjectId(chat_id)})
    return {"_id": str(chat["_id"]), "title": chat["title"]}

# ---------- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ----------
from app.rag_service import normalize

class EditQuestionIn(BaseModel):
    old_question: str
    new_question: str

@app.put("/chat/edit_question/{chat_id}", tags=["chat"])
async def edit_question(chat_id: str, data: EditQuestionIn, username: str = Depends(get_current_user)):
    from app.rag_service import qa_collection, ask_bot_stream

    norm_new = normalize(data.new_question)
    norm_old = normalize(data.old_question)

    # üîç ‡∏´‡∏≤ record ‡πÄ‡∏î‡∏¥‡∏° (‡∏ó‡∏±‡πâ‡∏á exact ‡πÅ‡∏•‡∏∞ normalize)
    record = qa_collection.find_one({
        "chat_id": chat_id,
        "username": username,
        "$or": [
            {"question": data.old_question},
            {"normalized": norm_old}
        ]
    })

    if not record:
        print(f"‚ö†Ô∏è Question not found for editing: {data.old_question}")
        raise HTTPException(status_code=404, detail="Question not found")

    # üöÄ ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ
    new_answer = ""
    async for token in ask_bot_stream(data.new_question, username, chat_id):
        new_answer += token

    if not new_answer.strip():
        raise HTTPException(status_code=500, detail="Bot did not return a new answer")

    # üíæ ‡πÄ‡∏û‡∏¥‡πà‡∏° record ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤)
    qa_collection.insert_one({
        "username": username,
        "chat_id": chat_id,
        "question": data.new_question,
        "normalized": norm_new,
        "answer": new_answer.strip(),
        "timestamp": datetime.utcnow()
    })

    print(f"‚úÖ Added new Q&A for edited question | chat_id={chat_id}")

    # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 200 OK ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    return JSONResponse(
        status_code=200,
        content={"msg": "Question updated and re-answered successfully", "answer": new_answer.strip()}
    )

# ---------- ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (PDF / Word) ----------
from app.db import files_collection
from PyPDF2 import PdfReader
from docx import Document
import tempfile

@app.post("/chat/upload/{chat_id}", tags=["chat"])
async def upload_file(chat_id: str, file: UploadFile = File(...), username: str = Depends(get_current_user)):
    """
    üìé ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠ Word ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô MongoDB
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
        ext = os.path.splitext(file.filename)[1].lower()
        if ext not in [".pdf", ".docx"]:
            raise HTTPException(status_code=400, detail="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞ Word (.docx) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

        # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
            tmp.write(await file.read())
            tmp_path = tmp.name

        # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        text_content = ""
        if ext == ".pdf":
            try:
                reader = PdfReader(tmp_path)
                for page in reader.pages:
                    page_text = page.extract_text()
                    if page_text:
                        text_content += page_text + "\n"
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        elif ext == ".docx":
            try:
                doc = Document(tmp_path)
                for para in doc.paragraphs:
                    text_content += para.text + "\n"
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Word ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        os.remove(tmp_path)

        if not text_content.strip():
            raise HTTPException(status_code=400, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á MongoDB
        files_collection.insert_one({
            "username": username,
            "chat_id": chat_id,
            "filename": file.filename,
            "content": text_content.strip(),
            "uploaded_at": datetime.utcnow()
        })

        print(f"üìé Uploaded file saved to MongoDB: {file.filename}")

        return JSONResponse(
            status_code=200,
            content={"msg": f"‡πÑ‡∏ü‡∏•‡πå '{file.filename}' ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!"}
        )

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
